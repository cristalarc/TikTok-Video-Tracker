[2024-10-16] Refactored GUI to Separate Settings Logic

-Updated TikTokTrackerGUI class to utilize a new SettingsManager for managing application settings:
-Created an instance of SettingsManager within TikTokTrackerGUI to handle settings persistence and logic.
-Modified the open_settings() method to create a SettingsWindow instance, passing both data_manager and settings_manager to decouple settings management from the UI.

Refactored SettingsWindow class:

-Updated the constructor (__init__()) to accept settings_manager as an additional parameter.
-Changed the save_settings() method name to save_user_settings() to better represent its role in saving settings from the UI.
-Integrated SettingsManager for saving user preferences, ensuring that SettingsWindow only handles the UI aspects.

Enhanced maintainability and Single Responsibility Principle (SRP) compliance:
-Divided the responsibilities of the SettingsWindow between UI (handled by SettingsWindow) and logic (handled by SettingsManager).
-Improved code clarity by making method names more descriptive and specific to their contexts.

[2024-10-09] Refactored Data Aggregation Methods

- Removed redundant `aggregate_weekly_data` method from the `DataManager` class.
- Enhanced `get_aggregation_data` method to handle all timeframes (Daily, Weekly, Monthly) consistently:
  - Improved week start calculation for weekly aggregation.
  - Added support for monthly aggregation.
  - Standardized period formatting across all timeframes.
- Updated `get_time_series_data` method to utilize the refactored `get_aggregation_data`:
  - Streamlined data retrieval process for non-percentage metrics.
  - Maintained custom aggregation for percentage-based metrics (CTR, CTOR, V-to-L rate, Video Finish Rate).

[2024-10-07] Percentage Metric Handling, Dual Plotting Improvements, Finished Aggregation

- Fixed incorrect calculation of percentage-based metrics (e.g., Video Finish Rate) in weekly aggregations:
  - Updated `aggregate_simple_average` method in `DataManager` class to correctly handle percentage values stored as numbers between 0 and 100.
  - Implemented conversion process: divide by 100 before calculation, compute average, then multiply by 100 to return to original scale.

- Enhanced `plot_metric` method in `Plotter` class:
  - Modified y-axis formatter to display percentage values with % symbol for relevant metrics (CTR, CTOR, Video Finish Rate, V-to-L rate).
  - Adjusted value processing to handle percentage metrics stored between 0 and 100 without additional scaling.

- Improved `plot_dual_metric` method in `Plotter` class:
  - Implemented dynamic formatting for y-axes and annotations based on metric type (percentage vs. non-percentage).
  - Enhanced data processing to correctly handle dates and values for both metrics.
  - Updated interactive cursor annotations to display formatted values based on metric type.

- Refactored plotting functions for better consistency and maintainability:
  - Streamlined data processing functions in both single and dual metric plotting methods.
  - Ensured consistent handling of date formats across different timeframe options (Daily, Weekly, Monthly).

- Improved error handling and user feedback:
  - Added more robust error checking and logging throughout the plotting process.
  - Implemented user-friendly warning messages for scenarios with no plottable data.

- Updated documentation:
  - Added comments and docstrings to clarify the purpose and functionality of key methods related to percentage metric handling and plotting.

[2024-10-07] Improvements to Plotting Aggregation

- Implemented a new method in the `Plotter` class to aggregate data for a selected video over a specified time range.
- Added a new button in the `TikTokTrackerGUI` class to trigger this aggregation and plotting.
- Updated the GUI to include a time range selection dropdown for the aggregation.

[2024-10-07] Improve Ingestion Data Transformation

- Implemented a new method in the `DataManager` class to transform percentage fields back to strings with a % sign.
- Updated the `upload_file` method to apply this transformation to the DataFrame before inserting the data into the database.

[2024-10-06] Dual Plotting Improvements and Bug Fixes

- Enhanced the `plot_dual_metric` method in the `Plotter` class to address x-axis labeling issues:
  - Modified x-axis tick placement to only show dates present in the data.
  - Implemented dynamic date formatting based on the selected timeframe (Daily, Weekly, Monthly).
  - Added rotation to x-axis labels for improved readability.

- Updated the handling of the interactive cursor in both `plot_dual_metric` and `plot_metric` methods:
  - Replaced deprecated `sel.target.index` with `sel.index` to resolve deprecation warnings from the mplcursors library.
  - Improved tooltip formatting to display correct date and value information.

- Refined data processing in `plot_dual_metric`:
  - Implemented better handling of NaN values and data alignment between two metrics.
  - Enhanced date parsing to support different timeframe aggregations.

- Improved overall plot appearance:
  - Added proper legends for dual metric plots.
  - Implemented `tight_layout()` to prevent label overlapping.

- Code Refactoring:
  - Consolidated similar code patterns in `plot_metric` and `plot_dual_metric` methods.
  - Improved error handling and logging for better debugging.

- These changes resolve issues with unnecessary x-axis labels, improve the accuracy of data representation, and enhance the overall user experience when interacting with plots.

[2024-10-06] Settings Window Improvements

- Settings window now opens on the same screen as the main application window.
- Settings window is modal, so it requires the user to close it before interacting with the application again.
- Settings window is transient, so it opens on top of the main application window.

[2024-10-04] Added First step of Plotting aggregation

- Implemented a new method in the `Plotter` class to aggregate data for a selected video over a specified time range.
- Added a new button in the `TikTokTrackerGUI` class to trigger this aggregation and plotting.
- Updated the GUI to include a time range selection dropdown for the aggregation.

[2024-10-02] Enhanced Excel File Upload Functionality

- Fixed a bug in the `on_video_select` method in the `TikTokTrackerGUI` class that trigerred a warning when no video was selected.

- Modified the `upload_file` method in the `TikTokTrackerGUI` class to support multiple file selection:
  - Updated file selection dialog to allow multiple file selection.
  - Implemented batch processing of selected files.

- Added a new `process_single_file` method to the `TikTokTrackerGUI` class:
  - Encapsulates the logic for processing a single Excel file.
  - Handles data validation, existing data checks, and database insertion.

- Improved error handling and user feedback:
  - Implemented individual file processing with error catching.
  - Added a mechanism to skip problematic files and continue with the upload process.
  - Created a summary report of processed and skipped files.

- Enhanced database backup functionality:
  - Modified to create a single backup before processing multiple files.
  - Ensures data integrity while improving efficiency for batch uploads.

- Updated the GUI to reflect changes after batch processing:
  - Refreshes the last performance date display.
  - Reloads and displays all videos after processing.

- Improved user notifications:
  - Added a detailed result message showing processed and skipped files.
  - Implemented error messaging for unexpected issues during the upload process.

[2024-10-01] Enhanced Dual Metric Plotting and Error Handling

- Improved the `plot_dual_metric` method in the Plotter class:
  - Added support for handling "--" values in percentage-based metrics.
  - Implemented conversion of "--" to np.nan for proper data handling.
  - Updated the interactive cursor to display "--" for missing data points.

- Enhanced the `plot_metric` method in the Plotter class:
  - Added support for handling "--" values in both percentage-based and non-percentage metrics.
  - Implemented conversion of "--" to np.nan and subsequent removal of NaN values before plotting.
  - Updated the interactive cursor to display "--" for missing data points.

- Improved error handling and user feedback:
  - Added checks to prevent plotting when no valid data is available.
  - Implemented warning messages for scenarios with no plottable data.

- Data processing enhancements:
  - Utilized Pandas DataFrame for efficient handling of missing data.
  - Implemented data cleaning steps to ensure only valid data points are plotted.

- Code refactoring and optimization:
  - Consolidated similar code patterns in `plot_metric` and `plot_dual_metric` methods.
  - Improved code readability and maintainability.

- Bug fixes:
  - Resolved ValueError issues related to converting "--" strings to float.
  - Fixed potential crashes when all data points for a metric were invalid.

[2024-09-30] Added Dual Metric Plotting Functionality

- Enhanced the plotting capabilities of the application:
  - Added a second metric selection dropdown in the GUI.
  - Implemented a new "Plot Dual Metrics" button in the TikTokTrackerGUI class.
  - Created a `create_selected_video_dual_metric_plot` method in the TikTokTrackerGUI class to handle dual metric plotting logic.
  - Developed a `plot_dual_metric` method in the Plotter class to visualize two metrics on the same chart with separate Y-axes.

- Enhanced data handling for dual metric plotting:
  - Modified the data retrieval process to fetch data for two metrics simultaneously.
  - Implemented data alignment using Pandas to handle potential mismatches in date ranges between metrics.

- Updated the Plotter class:
  - Added functionality to create and manage dual Y-axis plots.
  - Implemented different color coding for each metric (blue for the first metric, red for the second).
  - Added legends to distinguish between the two plotted metrics.

[2024-09-27] Added Home and Trending Pages

- Enhanced the user interface with new navigation options:
  - Added "Home" and "Trending" options to the top menu bar.
  - Implemented `show_home` and `show_trending` methods to switch between pages.
  - Created a `clear_page` method to ensure proper clearing of widgets when switching between pages.
  - Updated the `__init__` method to initialize new attributes and show the home page by default.

Bug Fixes for Plotting X-axis Issues

- Resolved issues where:
  - Single data point plots displayed an X-axis spanning multiple months.
    - Updated `plot_metric` in `Plotter` class to set X-axis limits narrowly around the single date.
  - X-axis showed duplicate dates with no data points.
    - Customized X-axis ticks to display only dates from the data, eliminating duplicates.
  - Improved date label formatting and rotation for better readability.

These changes ensure that plots accurately represent the data with correct X-axis labeling.

[2024-09-26] Plotting Functionality Improvements and Bug Fixes

- Modified the `plot_metric` method in the `Plotter` class to handle both percentage-based and non-percentage-based metrics correctly:
  - Added proper date parsing and formatting for the x-axis.
  - Implemented conversion of percentage strings to floats for percentage-based metrics.
  - Updated y-axis formatting for percentage-based metrics to display values as percentages.
  - Improved error handling and logging for better debugging.

- Updated the `create_selected_video_metric_plot` method in the `TikTokTrackerGUI` class:
  - Added debug logging to track data retrieval and processing.
  - Implemented checks to ensure data is available before attempting to plot.

- Resolved issues with plotting various metrics:
  - Fixed the y-axis display for percentage-based metrics (CTR, CTOR, Video Finish Rate, V-to-L rate).
  - Corrected the handling of non-numeric data in plots.
  - Addressed the "categorical units" warning for non-percentage metrics.

- Improved overall stability and consistency of the plotting functionality across different metric types.

- Added import for `matplotlib.dates` in the `plotter.py` file to support proper date formatting on the x-axis.

- Fixed a bug in the `upload_file` method of the `TikTokTrackerGUI` class:
  - The Last Performance Date widget now correctly displays the most recent date in the database after each file upload.
  - This ensures that uploading older data doesn't incorrectly update the Last Performance Date.

- Fixed a bug in the `clear_video_performance` method of the `TikTokTrackerGUI` class:
  - The Clear Video Performance dialog now appears on the same monitor as the main application window.
  - Added the `parent=self.master` parameter to all dialog calls within the method to ensure consistent positioning.

[2024-09-25] Plotting Functionality Improvements and Bug Fixes

- Renamed the `plot_metric` method in `gui.py` to `create_metric_plot` for clarity and to distinguish it from the `plot_metric` method in `plotter.py`.
- Updated references to the renamed method in `gui.py`, including the plot button creation and the `plot_metric_from_context` method.
- Modified the `Plotter` class in `plotter.py` to fix initialization issues with figure and axes:
  - Added `self.ax` attribute initialization in the `__init__` method.
  - Updated `clear_plot` method to also clear the `ax` attribute.
  - Modified `plot_metric` method to create new figure and axes if they don't exist.
- These changes resolve the AttributeError related to the 'ax' attribute and ensure the plotter section appears correctly in the interface.
- Improved overall stability and consistency of the plotting functionality.
- Removed the following metrics from plotting options:
  - New Followers
  - V-to-L clicks
  - Buyers
  - GPM
  - Shoppable video attributed GMV ($)
- Updated the `create_context_menu` method in the `TikTokTrackerGUI` class to reflect the reduced set of available metrics for plotting in the right-click context menu.
- Modified the `get_time_series_data` method in the `DataManager` class to include a check for valid metrics, adding an extra layer of security.
- Updated the `create_selected_video_metric_plot` and `plot_metric_from_context` methods in the `TikTokTrackerGUI` class to handle the conversion between display metric names and database column names consistently.
- These changes ensure that only the desired metrics can be plotted and improve the overall consistency of the plotting functionality across different parts of the application.

[2024-09-25] Added Safeguard for Single-Day Data and Renamed Excel Reading Method

- Renamed `read_excel` method to `read_video_performance_excel` in the `DataManager` class for improved clarity.
- Modified `extract_date_from_range` method to raise an error if the date range in the Excel file spans multiple days.
- Updated `upload_file` method in `TikTokTrackerGUI` class to handle the new error and display appropriate messages to the user.
- These changes ensure that only single-day data can be processed, preventing potential data inconsistencies from multi-day uploads.

[2024-09-24] Improved Sorting Functionality and Revenue Display

- Enhanced the `treeview_sort_column` method in the `TikTokTrackerGUI` class to properly handle both numeric and string values for sorting.
- Updated the column creation in the `create_widgets` method to ensure proper sorting is applied when column headers are clicked.
- Modified the `get_all_videos` method in the `DataManager` class to round the total video revenue to two decimal places.
- Updated the `search_videos` method in the `DataManager` class to also round the total video revenue to two decimal places for consistency.
- These changes improve the sorting functionality in the Video Database Records section and ensure that video revenue is consistently displayed with a maximum of two decimal places.

[2024-09-24] Changed methods's names to be more descriptive.

[2024-09-24] Aggregated Video Data in Video Database Records and Video Details

- Modified the `get_all_videos` method in the `DataManager` class to return aggregated data for each video ID.
- Updated the `load_all_videos` method in the `TikTokTrackerGUI` class to display the aggregated data in the Video Database Records section.

[2024-09-24] Added Persistence for VV Threshold Setting

- Added methods to save and load the VV threshold to/from a JSON file in the DataManager class.
- Modified the DataManager class to load the VV threshold from the JSON file on initialization.
- Updated the SettingsWindow class to save the new threshold using the set_vv_threshold method.

[2024-09-23] Added Settings Menu and Configurable VV Threshold

- Added a Settings menu to the main GUI.
- Created a new SettingsWindow class for configuring application settings.
- Implemented the ability to modify the Video View Ingestion threshold through the Settings window.
- Modified the DataManager class to use a configurable VV threshold instead of a hardcoded value.
- Updated the filter_videos method in DataManager to use the new configurable threshold.

[2024-09-22] Plotting Functionality Improvements and Bug Fixes

- Renamed the `plot_metric` method in `gui.py` to `create_metric_plot` for clarity and to distinguish it from the `plot_metric` method in `plotter.py`.
- Updated references to the renamed method in `gui.py`, including the plot button creation and the `plot_metric_from_context` method.
- Modified the `Plotter` class in `plotter.py` to fix initialization issues with figure and axes:
  - Added `self.ax` attribute initialization in the `__init__` method.
  - Updated `clear_plot` method to also clear the `ax` attribute.
  - Modified `plot_metric` method to create new figure and axes if they don't exist.
- These changes resolve the AttributeError related to the 'ax' attribute and ensure the plotter section appears correctly in the interface.
- Improved overall stability and consistency of the plotting functionality.

[2024-09-20] Video Ingestion Logic Update
- Modified the video ingestion logic to continue tracking videos that have ever reached 4000 VV.
- Updated the `filter_videos` method in the `DataManager` class to include videos already in the database, regardless of their current VV count.
- Added a new `get_existing_video_ids` method to fetch all video IDs from the database.
- Updated the `insert_or_update_records` method to ensure it updates existing records and adds new ones as needed.
- This change ensures that once a video is ingested (reaches 4000 VV), it continues to be tracked in subsequent uploads, even if its VV drops below 4000.
